#!/usr/bin/env php
<?php

require realpath(__DIR__ . '/../../../autoload.php');

use MartynBiz\Translate\Tool\TranslateTool;
use MartynBiz\Translate\Tool\Adapter; // path to namespace
use MartynBiz\Translate\Tool\Output;
use MartynBiz\Translate\Tool\FileSystem;

define('PROJECT_DIR', getcwd());
define('TEMPLATE_DIR', realpath(__DIR__ . '/../files/templates/'));
define('CONFIG_FILE', PROJECT_DIR . '/translatetool.json');

// get config if exists
$config = file_exists(CONFIG_FILE) ? json_decode(file_get_contents(CONFIG_FILE), true) : array();

try {

    $command = @$argv[1];

    // this switch is to ensure that commands that require config, config is set
    switch($command) {
        case 'init':
        case null: // no command passed, show help

            break;

        default:

            // ensure json isn't NULL, perhaps syntax error
            if (!file_exists(CONFIG_FILE) or is_null($config))
                throw new Exception('Config file data not set, or invalid JSON"');

            // set the adapter from config
            $adapterClass = 'MartynBiz\\Translate\\Tool\\Adapter\\' . ucfirst(strtolower($config['adapter']));
            $adapter = new $adapterClass;

            $fileSystem = new FileSystem();

            $tool = new TranslateTool($adapter, $fileSystem, $config);

    }

    switch($command) {
        case 'init':

            // copy a default file from the repo to the PROJECT_DIR
            $srcFile = realpath(__DIR__ . '/../files/translatetool.json');

            if (file_exists(CONFIG_FILE)) {
                echo Output::warning('File ./translatetool.json already exists.') . PHP_EOL;
            } else {
                copy($srcFile, CONFIG_FILE);
                echo Output::success('Created ./translatetool.json config file.') . PHP_EOL;
            }
            break;

        case 'list': // will list keys from stored

            // check config file is not missing
            if (!file_exists(CONFIG_FILE))
                throw new Exception('Config file missing - run "translatetool init"');

            // get $lang from paramaters
            if (! $lang = @$argv[2])
                throw new Exception('Language parameter missing - translatetool list <lang>');

            // get $lang from paramaters
            if (isset($config['valid_languages']) and !in_array($lang, $config['valid_languages']))
                throw new Exception('"' . $lang . '" is not in your valid_languages configuration.');

            // $keysFromDest = $tool->getKeysFromDestFiles($lang);
            $data = $tool->getData($lang);

            $emptyKeys = array_filter($data, function ($value) {
                return empty($value);
            });
            $nonEmptyKeys = array_filter($data, function ($value) {
                return !empty($value);
            });

            require TEMPLATE_DIR . '/list.php';

            break;

        case 'scan': // report which keys have been added, removed .. no update

            // check config file is not missing
            if (!file_exists(CONFIG_FILE))
                throw new Exception('Config file missing - run "translatetool init"');

            // get language parameter
            if (! $lang = @$argv[2])
                throw new Exception('Language parameter missing - translatetool scan <lang>');

            // get $lang from paramaters
            if (isset($config['valid_languages']) and !in_array($lang, $config['valid_languages']))
                throw new Exception('"' . $lang . '" is not in your valid_languages configuration.');

            $keysFromDest = $tool->getKeysFromDestFile($lang);
            $keysFromSrc = $tool->getKeysFromSrcFiles();

            $keysToAdd = $tool->getDiffAddedKeys($keysFromDest, $keysFromSrc);
            $keysToRemove = $tool->getDiffRemovedKeys($keysFromDest, $keysFromSrc);

            require TEMPLATE_DIR . '/scan.php';

            break;

        case 'count':

            // get $lang from paramaters
            if (! $lang = @$argv[2])
                throw new Exception('Language parameter missing - translatetool count <lang>');

            // get $lang from paramaters
            if (isset($config['valid_languages']) and !in_array($lang, $config['valid_languages']))
                throw new Exception('"' . $lang . '" is not in your valid_languages configuration.');

            $data = $tool->getData($lang);

            echo Output::success(count($data)) . PHP_EOL;

            break;

        case 'get_value':

            // get $lang from paramaters
            if (! $lang = @$argv[2])
                throw new Exception('Language parameter missing - translatetool get_value <lang> <key>');

            // get $lang from paramaters
            if (isset($config['valid_languages']) and !in_array($lang, $config['valid_languages']))
                throw new Exception('"' . $lang . '" is not in your valid_languages configuration.');

            // get $key from paramaters
            if (! $key = @$argv[3])
                throw new Exception('key pair missing - translatetool get_value <lang> <key>');

            // get the dest file
            $destFile = $tool->getDestFile($lang);

            // attempt to get data from file
            if ($data = $fileSystem->getFileData($destFile)) {

                if ($tool->hasKey($data, $key)) {
                    $value = $tool->getValue($data, $key);
                    echo Output::success(json_encode($value)) . PHP_EOL;
                } else {
                    throw new Exception('Could not find key "' . $key . '"');
                }

            } else {
                throw new Exception('Could not retrieve data from "' . $destFile . '".');
            }

            break;

        case 'set_value':

            // get $lang from paramaters
            if (! $lang = @$argv[2])
                throw new Exception('Language parameter missing - translatetool get_value <lang> <key>="<value>"');

            // get $lang from paramaters
            if (isset($config['valid_languages']) and !in_array($lang, $config['valid_languages']))
                throw new Exception('"' . $lang . '" is not in your valid_languages configuration.');

            // we need the key=value
            if (! isset($argv[3]))
                throw new Exception('key/value pair missing - translatetool get_value <lang> <key>="<value>"');
            elseif (! preg_match('/(.*)=(.*)/', $argv[3], $pairSplit))
                throw new Exception('key/value pair incorrect format - translatetool get_value <lang> <key>="<value>"');

            $key = $pairSplit[1];
            $newValue = $pairSplit[2];

            // get the dest file
            $destFile = $fileSystem->getDestFile($lang);

            // attempt to get data from file
            if ($data = $fileSystem->getFileData($destFile)) {

                if ($tool->hasKey($data, $key)) {
                    $tool->setValue($data, $key, $newValue, array(
                        'create' => false, // don't create a new key, if none exists
                        'overwrite' => true,
                    ));

                    // write to file
                    $fileSystem->writeDataToFile($destFile, $data);

                    echo Output::success($newValue) . PHP_EOL;
                } else {
                    throw new Exception('Could not find key "' . $key . '"');
                }
            } else {
                throw new Exception('Could not retrieve data from "' . $destFile . '".');
            }

            break;

        case 'update':

            // when adding new items, even if something seems removed, attempt to
            // add it

            // get $lang from paramaters
            if (! $lang = @$argv[2])
                throw new Exception('Language parameter missing - translatetool update <lang>');

            // get $lang from paramaters
            if (isset($config['valid_languages']) and !in_array($lang, $config['valid_languages']))
                throw new Exception('"' . $lang . '" is not in your valid_languages configuration.');

            $keysFromDest = $tool->getKeysFromDestFile($lang);
            $keysFromSrc = $tool->getKeysFromSrcFiles();

            $keysToAdd = $tool->getDiffAddedKeys($keysFromDest, $keysFromSrc);
            $keysToRemove = $tool->getDiffRemovedKeys($keysFromDest, $keysFromSrc);

            require TEMPLATE_DIR . '/scan.php';


            // confirm proceed
            if (empty($keysToAdd) and empty($keysToRemove)) {
                echo 'Nothing to update.' . PHP_EOL;
                break;
            }


            // confirm proceed
            if (strtolower(readline('Sync files? (y/N) ')) != 'y') {
                echo Output::error('Operation aborted.') . PHP_EOL;
                break;
            } else {
                echo PHP_EOL; // keep it tidy
            }

            $data = $tool->getData($lang);

            // add keys
            if (count($keysToAdd)) {
                $tool->addKeys($data, $keysToAdd);
            }

            // remove keys
            if (count($keysToRemove)) {
                $tool->removeKeys($data, $keysToRemove);
            }

            // data written to file
            $file = $tool->getDestFile($lang);
            $tool->putData($lang, $data);
            echo Output::success('Updated file: ' . $file) . PHP_EOL;

            break;

        case 'php2csv':
        case 'csv2php':
        // try - https://github.com/raulferras/PHP-po-parser

            list($srcType, $destType) = explode('2', $command);

            // depending on the covnersion, this file may be src or dest
            $csvFile = $argv[2];

            // extract the data from the source file
            // should create a name/value array, nested in a lang e.g. {{key1: {en: value, ja: value}, key2:...}
            switch($srcType) {
                case 'php':

                    $allData = array();
                    foreach($config['languages'] as $lang) {
                        $data = $tool->getData($lang);
                        foreach($data as $key => $value) {
                            $allData[$key][$lang] = $value;
                        }
                    }

                    break;
                case 'csv':

                    $allData = array();
                    $raw = file_get_contents($csvFile);
                    $rows = explode(PHP_EOL, $raw);
                    $langRowData = explode(',', (array_shift($rows)));

                    // now put the keys and values into array
                    foreach ($rows as $row) {
                        $rowData = explode(',', $row);
                        $key = $rowData[0];

                        foreach ($langRowData as $i => $lang) {

                            // if first element (key), continue
                            if ($i===0) continue;

                            // only valid langs allowed
                            if (!in_array($lang, $config['languages'])) continue;

                            // if empty string, continue
                            if (empty($rowData[$i])) continue;

                            $allData[$key][$lang] = $rowData[$i];
                        }
                    }

                    break;
            }

            // write the data to dest file
            switch($destType) {
                case 'csv':

                    // open the csv file for writing
                    $fp = fopen($csvFile, 'w');

                    // this will be the language row, but we'll building it up
                    // merge the lang row from the keys, new ones will be incorporated
                    $langRowData = array();
                    foreach ($allData as $key => $translations) {
                        $langRowData = array_replace($langRowData, array_keys($translations));
                    }
                    array_unshift($langRowData, '');

                    // save the column headers
                    fputcsv($fp, $langRowData);

                    // now the translations
                    foreach ($allData as $key => $translations) {
                        foreach ($translations as $lang => $value) {

                            // array with key as first column
                            $rowToWrite = array_values($translations);
                            array_unshift($rowToWrite, $key);
                        }

                        // write to csv
                        fputcsv($fp, $rowToWrite);
                    }

                    // close
                    fclose($fp);
                    echo Output::success('Updated file: ' . $csvFile) . PHP_EOL;

                    break;
                case 'php':

                    // put translations back in files
                    // first, convert to a move convenient array {en: {key1: value1, key2: value2}, ja:...}
                    $dataToWrite = array();
                    foreach($allData as $key => $translations) {
                        foreach($translations as $lang => $value) {
                            $dataToWrite[$lang][$key] = $value;
                        }
                    }

                    // write each to file
                    foreach($dataToWrite as $lang => $data) {
                        $file = $tool->getDestFile($lang);
                        $tool->putData($lang, $data);
                        echo Output::success('Updated file: ' . $file) . PHP_EOL;
                    }

                    break;
            }

            break;

        case null: // no command passed, show help

            require TEMPLATE_DIR . '/help.php';

            break;

        default: // no recognised, display error proceeded by help (null)
            throw new Exception('Command not recognised');
    }
} catch (Exception $e) {
    echo Output::error('Error: ' . $e->getMessage()) . PHP_EOL;
}
